// vite.config.ts
import { defineConfig } from "file:///C:/Users/lk/Documents/GitHub/skip-go/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/lk/Documents/GitHub/skip-go/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { resolve } from "path";
import dts from "file:///C:/Users/lk/Documents/GitHub/skip-go/packages/widget/node_modules/vite-plugin-dts/dist/index.mjs";
import path from "path";
import { nodePolyfills } from "file:///C:/Users/lk/Documents/GitHub/skip-go/node_modules/vite-plugin-node-polyfills/dist/index.js";

// package.json
var peerDependencies = {
  "@tanstack/react-query": "^5.51.21",
  react: ">=17.0.0",
  "react-dom": ">=17.0.0",
  viem: "^2.21.55",
  wagmi: "^2.14.1"
};
var dependencies = {
  "@amplitude/analytics-browser": "^2.11.12",
  "@amplitude/plugin-session-replay-browser": "^1.16.5",
  "@cosmjs/amino": "0.33.1",
  "@cosmjs/cosmwasm-stargate": "0.33.1",
  "@cosmjs/encoding": "0.33.1",
  "@cosmjs/math": "0.33.1",
  "@cosmjs/proto-signing": "0.33.1",
  "@cosmjs/stargate": "0.33.1",
  "@ebay/nice-modal-react": "^1.2.13",
  "@eslint/compat": "^1.1.1",
  "@penumbra-zone/bech32m": "^13.0.0",
  "@penumbra-zone/client": "^24.0.0",
  "@penumbra-zone/protobuf": "^7.2.0",
  "@penumbra-zone/transport-dom": "^7.5.0",
  "@r2wc/react-to-web-component": "^2.0.3",
  "@sentry/react": "^8.46.0",
  "@skip-go/client": "workspace:^",
  "@solana/spl-token": "^0.4.8",
  "@solana/wallet-adapter-ledger": "^0.9.25",
  "@solana/wallet-adapter-react": "^0.15.39",
  "@solana/wallet-adapter-wallets": "^0.19.37",
  "@solana/web3.js": "^1.95.8",
  "@tanstack/query-core": "^5.51.21",
  "@walletconnect/modal": "^2.7.0",
  "@walletconnect/sign-client": "^2.20.3",
  "@walletconnect/solana-adapter": "^0.0.8",
  add: "^2.0.6",
  bech32: "^2.0.0",
  graz: "0.3.2",
  jotai: "^2.10.1",
  "jotai-effect": "^1.0.2",
  "jotai-tanstack-query": "^0.8.6",
  "lodash.debounce": "^4.0.8",
  pluralize: "^8.0.0",
  "rc-virtual-list": "^3.14.5",
  "react-error-boundary": "^4.0.13",
  "react-shadow-scope": "^1.0.5",
  "styled-components": "^6.1.13",
  yarn: "^1.22.22",
  zod: "^3.23.8"
};

// vite.config.ts
var __vite_injected_original_dirname = "C:\\Users\\lk\\Documents\\GitHub\\skip-go\\packages\\widget";
var externalDeps = [
  ...Object.keys(dependencies || {}),
  ...Object.keys(peerDependencies || {}),
  "react/jsx-runtime"
].filter((dep) => dep !== "styled-components");
var vite_config_default = defineConfig({
  define: {
    "process.env.VISUAL_TEST": JSON.stringify(process.env.VISUAL_TEST)
  },
  optimizeDeps: {
    include: [
      "vite-plugin-node-polyfills/shims/buffer",
      "vite-plugin-node-polyfills/shims/global",
      "vite-plugin-node-polyfills/shims/process"
    ]
  },
  resolve: {
    preserveSymlinks: true,
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  plugins: [
    react(),
    dts({
      rollupTypes: true,
      outDir: "build",
      tsconfigPath: "./tsconfig.json",
      exclude: ["node_modules/**", "build/**", ".storybook/**", "scripts/**"]
    }),
    nodePolyfills()
  ],
  build: {
    commonjsOptions: {
      include: [/jotai-effect/, /node_modules/],
      transformMixedEsModules: true
    },
    minify: false,
    lib: {
      // Could also be a dictionary or array of multiple entry points
      entry: resolve(__vite_injected_original_dirname, "src/index.tsx"),
      formats: ["es"],
      name: "widget"
    },
    sourcemap: false,
    rollupOptions: {
      treeshake: true,
      external: externalDeps,
      output: {
        dir: "build",
        entryFileNames: "[name].js"
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
