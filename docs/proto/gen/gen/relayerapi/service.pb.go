// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: relayerapi/service.proto

package relayerapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BridgeType int32

const (
	BridgeType_BRIDGE_TYPE_UNKNOWN BridgeType = 0
	BridgeType_BRIDGE_TYPE_CCTP    BridgeType = 1
	BridgeType_BRIDGE_TYPE_EUREKA  BridgeType = 2
)

// Enum value maps for BridgeType.
var (
	BridgeType_name = map[int32]string{
		0: "BRIDGE_TYPE_UNKNOWN",
		1: "BRIDGE_TYPE_CCTP",
		2: "BRIDGE_TYPE_EUREKA",
	}
	BridgeType_value = map[string]int32{
		"BRIDGE_TYPE_UNKNOWN": 0,
		"BRIDGE_TYPE_CCTP":    1,
		"BRIDGE_TYPE_EUREKA":  2,
	}
)

func (x BridgeType) Enum() *BridgeType {
	p := new(BridgeType)
	*p = x
	return p
}

func (x BridgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_relayerapi_service_proto_enumTypes[0].Descriptor()
}

func (BridgeType) Type() protoreflect.EnumType {
	return &file_relayerapi_service_proto_enumTypes[0]
}

func (x BridgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeType.Descriptor instead.
func (BridgeType) EnumDescriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{0}
}

type StatusCode int32

const (
	StatusCode_UNKNOWN                       StatusCode = 0
	StatusCode_PENDING                       StatusCode = 1
	StatusCode_PROCESSING                    StatusCode = 2
	StatusCode_COMPLETED                     StatusCode = 3
	StatusCode_CHECK_RECV_PACKET_DELIVERY    StatusCode = 4
	StatusCode_GET_RECV_PACKET               StatusCode = 5
	StatusCode_DELIVER_RECV_PACKET           StatusCode = 6
	StatusCode_WAIT_FOR_WRITE_ACK            StatusCode = 7
	StatusCode_CHECK_ACK_PACKET_DELIVERY     StatusCode = 8
	StatusCode_GET_ACK_PACKET                StatusCode = 9
	StatusCode_DELIVER_ACK_PACKET            StatusCode = 10
	StatusCode_CHECK_TIMEOUT_PACKET_DELIVERY StatusCode = 11
	StatusCode_GET_TIMEOUT_PACKET            StatusCode = 12
	StatusCode_DELIVER_TIMEOUT_PACKET        StatusCode = 13
	StatusCode_COMPLETE_WITH_ACK             StatusCode = 14
	StatusCode_COMPLETE_WITH_TIMEOUT         StatusCode = 15
	StatusCode_FAILED                        StatusCode = 16
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "PENDING",
		2:  "PROCESSING",
		3:  "COMPLETED",
		4:  "CHECK_RECV_PACKET_DELIVERY",
		5:  "GET_RECV_PACKET",
		6:  "DELIVER_RECV_PACKET",
		7:  "WAIT_FOR_WRITE_ACK",
		8:  "CHECK_ACK_PACKET_DELIVERY",
		9:  "GET_ACK_PACKET",
		10: "DELIVER_ACK_PACKET",
		11: "CHECK_TIMEOUT_PACKET_DELIVERY",
		12: "GET_TIMEOUT_PACKET",
		13: "DELIVER_TIMEOUT_PACKET",
		14: "COMPLETE_WITH_ACK",
		15: "COMPLETE_WITH_TIMEOUT",
		16: "FAILED",
	}
	StatusCode_value = map[string]int32{
		"UNKNOWN":                       0,
		"PENDING":                       1,
		"PROCESSING":                    2,
		"COMPLETED":                     3,
		"CHECK_RECV_PACKET_DELIVERY":    4,
		"GET_RECV_PACKET":               5,
		"DELIVER_RECV_PACKET":           6,
		"WAIT_FOR_WRITE_ACK":            7,
		"CHECK_ACK_PACKET_DELIVERY":     8,
		"GET_ACK_PACKET":                9,
		"DELIVER_ACK_PACKET":            10,
		"CHECK_TIMEOUT_PACKET_DELIVERY": 11,
		"GET_TIMEOUT_PACKET":            12,
		"DELIVER_TIMEOUT_PACKET":        13,
		"COMPLETE_WITH_ACK":             14,
		"COMPLETE_WITH_TIMEOUT":         15,
		"FAILED":                        16,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_relayerapi_service_proto_enumTypes[1].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_relayerapi_service_proto_enumTypes[1]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{1}
}

type ChainEnvironment int32

const (
	ChainEnvironment_CHAIN_ENVIRONMENT_UNKNOWN ChainEnvironment = 0
	ChainEnvironment_CHAIN_ENVIRONMENT_TESTNET ChainEnvironment = 1
	ChainEnvironment_CHAIN_ENVIRONMENT_MAINNET ChainEnvironment = 2
)

// Enum value maps for ChainEnvironment.
var (
	ChainEnvironment_name = map[int32]string{
		0: "CHAIN_ENVIRONMENT_UNKNOWN",
		1: "CHAIN_ENVIRONMENT_TESTNET",
		2: "CHAIN_ENVIRONMENT_MAINNET",
	}
	ChainEnvironment_value = map[string]int32{
		"CHAIN_ENVIRONMENT_UNKNOWN": 0,
		"CHAIN_ENVIRONMENT_TESTNET": 1,
		"CHAIN_ENVIRONMENT_MAINNET": 2,
	}
)

func (x ChainEnvironment) Enum() *ChainEnvironment {
	p := new(ChainEnvironment)
	*p = x
	return p
}

func (x ChainEnvironment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainEnvironment) Descriptor() protoreflect.EnumDescriptor {
	return file_relayerapi_service_proto_enumTypes[2].Descriptor()
}

func (ChainEnvironment) Type() protoreflect.EnumType {
	return &file_relayerapi_service_proto_enumTypes[2]
}

func (x ChainEnvironment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainEnvironment.Descriptor instead.
func (ChainEnvironment) EnumDescriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{2}
}

type FeeAsset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Denom         string                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	CoingeckoId   string                 `protobuf:"bytes,2,opt,name=coingecko_id,json=coingeckoId,proto3" json:"coingecko_id,omitempty"`
	Decimals      uint32                 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeeAsset) Reset() {
	*x = FeeAsset{}
	mi := &file_relayerapi_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeAsset) ProtoMessage() {}

func (x *FeeAsset) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeAsset.ProtoReflect.Descriptor instead.
func (*FeeAsset) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{0}
}

func (x *FeeAsset) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *FeeAsset) GetCoingeckoId() string {
	if x != nil {
		return x.CoingeckoId
	}
	return ""
}

func (x *FeeAsset) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type QuoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceChainId string                 `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId   string                 `protobuf:"bytes,2,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	BridgeType    BridgeType             `protobuf:"varint,3,opt,name=bridge_type,json=bridgeType,proto3,enum=skip.relayer.BridgeType" json:"bridge_type,omitempty"`
	FeeAsset      *FeeAsset              `protobuf:"bytes,4,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuoteRequest) Reset() {
	*x = QuoteRequest{}
	mi := &file_relayerapi_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRequest) ProtoMessage() {}

func (x *QuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRequest.ProtoReflect.Descriptor instead.
func (*QuoteRequest) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteRequest) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *QuoteRequest) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *QuoteRequest) GetBridgeType() BridgeType {
	if x != nil {
		return x.BridgeType
	}
	return BridgeType_BRIDGE_TYPE_UNKNOWN
}

func (x *QuoteRequest) GetFeeAsset() *FeeAsset {
	if x != nil {
		return x.FeeAsset
	}
	return nil
}

type QuoteResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PaymentAmount            string                 `protobuf:"bytes,1,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	PaymentAddress           string                 `protobuf:"bytes,2,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	PaymentAddressIsContract bool                   `protobuf:"varint,3,opt,name=payment_address_is_contract,json=paymentAddressIsContract,proto3" json:"payment_address_is_contract,omitempty"`
	Expiration               *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *QuoteResponse) Reset() {
	*x = QuoteResponse{}
	mi := &file_relayerapi_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteResponse) ProtoMessage() {}

func (x *QuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteResponse.ProtoReflect.Descriptor instead.
func (*QuoteResponse) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{2}
}

func (x *QuoteResponse) GetPaymentAmount() string {
	if x != nil {
		return x.PaymentAmount
	}
	return ""
}

func (x *QuoteResponse) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *QuoteResponse) GetPaymentAddressIsContract() bool {
	if x != nil {
		return x.PaymentAddressIsContract
	}
	return false
}

func (x *QuoteResponse) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type CCTPInfo struct {
	state                          protoimpl.MessageState              `protogen:"open.v1"`
	SystemAccountTokenAccountPairs []*SVMSystemAccountTokenAccountPair `protobuf:"bytes,1,rep,name=system_account_token_account_pairs,json=systemAccountTokenAccountPairs,proto3" json:"system_account_token_account_pairs,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CCTPInfo) Reset() {
	*x = CCTPInfo{}
	mi := &file_relayerapi_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCTPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTPInfo) ProtoMessage() {}

func (x *CCTPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTPInfo.ProtoReflect.Descriptor instead.
func (*CCTPInfo) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{3}
}

func (x *CCTPInfo) GetSystemAccountTokenAccountPairs() []*SVMSystemAccountTokenAccountPair {
	if x != nil {
		return x.SystemAccountTokenAccountPairs
	}
	return nil
}

type NobleForwardingInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Recipient     string                 `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NobleForwardingInfo) Reset() {
	*x = NobleForwardingInfo{}
	mi := &file_relayerapi_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NobleForwardingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NobleForwardingInfo) ProtoMessage() {}

func (x *NobleForwardingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NobleForwardingInfo.ProtoReflect.Descriptor instead.
func (*NobleForwardingInfo) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{4}
}

func (x *NobleForwardingInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NobleForwardingInfo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *NobleForwardingInfo) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

type SVMSystemAccountTokenAccountPair struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SystemAccount    string                 `protobuf:"bytes,1,opt,name=system_account,json=systemAccount,proto3" json:"system_account,omitempty"`
	TokenAccount     string                 `protobuf:"bytes,2,opt,name=token_account,json=tokenAccount,proto3" json:"token_account,omitempty"`
	TokenMintAccount string                 `protobuf:"bytes,3,opt,name=token_mint_account,json=tokenMintAccount,proto3" json:"token_mint_account,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SVMSystemAccountTokenAccountPair) Reset() {
	*x = SVMSystemAccountTokenAccountPair{}
	mi := &file_relayerapi_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SVMSystemAccountTokenAccountPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVMSystemAccountTokenAccountPair) ProtoMessage() {}

func (x *SVMSystemAccountTokenAccountPair) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVMSystemAccountTokenAccountPair.ProtoReflect.Descriptor instead.
func (*SVMSystemAccountTokenAccountPair) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{5}
}

func (x *SVMSystemAccountTokenAccountPair) GetSystemAccount() string {
	if x != nil {
		return x.SystemAccount
	}
	return ""
}

func (x *SVMSystemAccountTokenAccountPair) GetTokenAccount() string {
	if x != nil {
		return x.TokenAccount
	}
	return ""
}

func (x *SVMSystemAccountTokenAccountPair) GetTokenMintAccount() string {
	if x != nil {
		return x.TokenMintAccount
	}
	return ""
}

type VerifyRelayPaymentRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TxHash              string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ChainId             string                 `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CctpMetadata        *CCTPInfo              `protobuf:"bytes,4,opt,name=cctp_metadata,json=cctpMetadata,proto3" json:"cctp_metadata,omitempty"`
	NobleForwardingInfo *NobleForwardingInfo   `protobuf:"bytes,5,opt,name=noble_forwarding_info,json=nobleForwardingInfo,proto3" json:"noble_forwarding_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VerifyRelayPaymentRequest) Reset() {
	*x = VerifyRelayPaymentRequest{}
	mi := &file_relayerapi_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyRelayPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRelayPaymentRequest) ProtoMessage() {}

func (x *VerifyRelayPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRelayPaymentRequest.ProtoReflect.Descriptor instead.
func (*VerifyRelayPaymentRequest) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyRelayPaymentRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *VerifyRelayPaymentRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *VerifyRelayPaymentRequest) GetCctpMetadata() *CCTPInfo {
	if x != nil {
		return x.CctpMetadata
	}
	return nil
}

func (x *VerifyRelayPaymentRequest) GetNobleForwardingInfo() *NobleForwardingInfo {
	if x != nil {
		return x.NobleForwardingInfo
	}
	return nil
}

type VerifyRelayPaymentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyRelayPaymentResponse) Reset() {
	*x = VerifyRelayPaymentResponse{}
	mi := &file_relayerapi_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyRelayPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRelayPaymentResponse) ProtoMessage() {}

func (x *VerifyRelayPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRelayPaymentResponse.ProtoReflect.Descriptor instead.
func (*VerifyRelayPaymentResponse) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{7}
}

type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_relayerapi_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{8}
}

func (x *StatusRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    StatusCode             `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=skip.relayer.StatusCode" json:"status_code,omitempty"`
	StatusMessage string                 `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_relayerapi_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{9}
}

func (x *StatusResponse) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_UNKNOWN
}

func (x *StatusResponse) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type RelayRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TxHash           string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TransferInfo     *TransferInfo          `protobuf:"bytes,2,opt,name=transfer_info,json=transferInfo,proto3" json:"transfer_info,omitempty"`
	ChainEnvironment ChainEnvironment       `protobuf:"varint,3,opt,name=chain_environment,json=chainEnvironment,proto3,enum=skip.relayer.ChainEnvironment" json:"chain_environment,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RelayRequest) Reset() {
	*x = RelayRequest{}
	mi := &file_relayerapi_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayRequest) ProtoMessage() {}

func (x *RelayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayRequest.ProtoReflect.Descriptor instead.
func (*RelayRequest) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{10}
}

func (x *RelayRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *RelayRequest) GetTransferInfo() *TransferInfo {
	if x != nil {
		return x.TransferInfo
	}
	return nil
}

func (x *RelayRequest) GetChainEnvironment() ChainEnvironment {
	if x != nil {
		return x.ChainEnvironment
	}
	return ChainEnvironment_CHAIN_ENVIRONMENT_UNKNOWN
}

type TransferInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TransferInfo:
	//
	//	*TransferInfo_Cctp
	//	*TransferInfo_Eureka
	TransferInfo  isTransferInfo_TransferInfo `protobuf_oneof:"transfer_info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferInfo) Reset() {
	*x = TransferInfo{}
	mi := &file_relayerapi_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfo) ProtoMessage() {}

func (x *TransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfo.ProtoReflect.Descriptor instead.
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{11}
}

func (x *TransferInfo) GetTransferInfo() isTransferInfo_TransferInfo {
	if x != nil {
		return x.TransferInfo
	}
	return nil
}

func (x *TransferInfo) GetCctp() *TransferInfoCCTP {
	if x != nil {
		if x, ok := x.TransferInfo.(*TransferInfo_Cctp); ok {
			return x.Cctp
		}
	}
	return nil
}

func (x *TransferInfo) GetEureka() *TransferInfoEureka {
	if x != nil {
		if x, ok := x.TransferInfo.(*TransferInfo_Eureka); ok {
			return x.Eureka
		}
	}
	return nil
}

type isTransferInfo_TransferInfo interface {
	isTransferInfo_TransferInfo()
}

type TransferInfo_Cctp struct {
	Cctp *TransferInfoCCTP `protobuf:"bytes,1,opt,name=cctp,proto3,oneof"`
}

type TransferInfo_Eureka struct {
	Eureka *TransferInfoEureka `protobuf:"bytes,2,opt,name=eureka,proto3,oneof"`
}

func (*TransferInfo_Cctp) isTransferInfo_TransferInfo() {}

func (*TransferInfo_Eureka) isTransferInfo_TransferInfo() {}

type TransferInfoCCTP struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SourceDomain        uint32                 `protobuf:"varint,1,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	DestinationDomain   uint32                 `protobuf:"varint,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	Nonce               uint64                 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MessageBytes        []byte                 `protobuf:"bytes,4,opt,name=message_bytes,json=messageBytes,proto3" json:"message_bytes,omitempty"`
	SvmSystemAccount    *string                `protobuf:"bytes,5,opt,name=svm_system_account,json=svmSystemAccount,proto3,oneof" json:"svm_system_account,omitempty"`
	MessageSentTxTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=message_sent_tx_time,json=messageSentTxTime,proto3" json:"message_sent_tx_time,omitempty"`
	TransferAmount      uint64                 `protobuf:"varint,7,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
	NobleForwardingInfo *NobleForwardingInfo   `protobuf:"bytes,8,opt,name=noble_forwarding_info,json=nobleForwardingInfo,proto3" json:"noble_forwarding_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TransferInfoCCTP) Reset() {
	*x = TransferInfoCCTP{}
	mi := &file_relayerapi_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInfoCCTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfoCCTP) ProtoMessage() {}

func (x *TransferInfoCCTP) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfoCCTP.ProtoReflect.Descriptor instead.
func (*TransferInfoCCTP) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{12}
}

func (x *TransferInfoCCTP) GetSourceDomain() uint32 {
	if x != nil {
		return x.SourceDomain
	}
	return 0
}

func (x *TransferInfoCCTP) GetDestinationDomain() uint32 {
	if x != nil {
		return x.DestinationDomain
	}
	return 0
}

func (x *TransferInfoCCTP) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransferInfoCCTP) GetMessageBytes() []byte {
	if x != nil {
		return x.MessageBytes
	}
	return nil
}

func (x *TransferInfoCCTP) GetSvmSystemAccount() string {
	if x != nil && x.SvmSystemAccount != nil {
		return *x.SvmSystemAccount
	}
	return ""
}

func (x *TransferInfoCCTP) GetMessageSentTxTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MessageSentTxTime
	}
	return nil
}

func (x *TransferInfoCCTP) GetTransferAmount() uint64 {
	if x != nil {
		return x.TransferAmount
	}
	return 0
}

func (x *TransferInfoCCTP) GetNobleForwardingInfo() *NobleForwardingInfo {
	if x != nil {
		return x.NobleForwardingInfo
	}
	return nil
}

type TransferInfoEureka struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	SourceChainId             string                 `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestinationChainId        string                 `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	PacketSourceClientId      string                 `protobuf:"bytes,3,opt,name=packet_source_client_id,json=packetSourceClientId,proto3" json:"packet_source_client_id,omitempty"`
	PacketDestinationClientId string                 `protobuf:"bytes,4,opt,name=packet_destination_client_id,json=packetDestinationClientId,proto3" json:"packet_destination_client_id,omitempty"`
	PacketSequenceNumber      uint64                 `protobuf:"varint,5,opt,name=packet_sequence_number,json=packetSequenceNumber,proto3" json:"packet_sequence_number,omitempty"`
	PacketTimeoutTime         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=packet_timeout_time,json=packetTimeoutTime,proto3" json:"packet_timeout_time,omitempty"`
	SourceTxTime              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=source_tx_time,json=sourceTxTime,proto3" json:"source_tx_time,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TransferInfoEureka) Reset() {
	*x = TransferInfoEureka{}
	mi := &file_relayerapi_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInfoEureka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfoEureka) ProtoMessage() {}

func (x *TransferInfoEureka) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfoEureka.ProtoReflect.Descriptor instead.
func (*TransferInfoEureka) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{13}
}

func (x *TransferInfoEureka) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *TransferInfoEureka) GetDestinationChainId() string {
	if x != nil {
		return x.DestinationChainId
	}
	return ""
}

func (x *TransferInfoEureka) GetPacketSourceClientId() string {
	if x != nil {
		return x.PacketSourceClientId
	}
	return ""
}

func (x *TransferInfoEureka) GetPacketDestinationClientId() string {
	if x != nil {
		return x.PacketDestinationClientId
	}
	return ""
}

func (x *TransferInfoEureka) GetPacketSequenceNumber() uint64 {
	if x != nil {
		return x.PacketSequenceNumber
	}
	return 0
}

func (x *TransferInfoEureka) GetPacketTimeoutTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PacketTimeoutTime
	}
	return nil
}

func (x *TransferInfoEureka) GetSourceTxTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceTxTime
	}
	return nil
}

type RelayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelayResponse) Reset() {
	*x = RelayResponse{}
	mi := &file_relayerapi_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayResponse) ProtoMessage() {}

func (x *RelayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayerapi_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayResponse.ProtoReflect.Descriptor instead.
func (*RelayResponse) Descriptor() ([]byte, []int) {
	return file_relayerapi_service_proto_rawDescGZIP(), []int{14}
}

var File_relayerapi_service_proto protoreflect.FileDescriptor

var file_relayerapi_service_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x08, 0x46, 0x65, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6b, 0x6f, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x43, 0x43, 0x54, 0x50, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x7a, 0x0a, 0x22, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x56, 0x4d,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x1e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x67, 0x0a,
	0x13, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x53, 0x56, 0x4d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x63, 0x74, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x43,
	0x54, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x63, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x15, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x72, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x6b, 0x69,
	0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x04, 0x63, 0x63, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x54, 0x50, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x63, 0x74, 0x70, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x48, 0x00, 0x52, 0x06, 0x65, 0x75, 0x72, 0x65,
	0x6b, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x03, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x54, 0x50, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x76, 0x6d, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x76, 0x6d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x15, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4e,
	0x6f, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x13, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x76, 0x6d, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaa,
	0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x75, 0x72, 0x65, 0x6b, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x53, 0x0a, 0x0a,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x43, 0x54, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x55, 0x52, 0x45, 0x4b, 0x41, 0x10,
	0x02, 0x2a, 0x8b, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x07, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x08, 0x12, 0x12,
	0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x16, 0x0a,
	0x12, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x0d, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x10, 0x2a,
	0x6f, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x56,
	0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x49,
	0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52,
	0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x02,
	0x32, 0xcd, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x70, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73,
	0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x2e, 0x73, 0x6b, 0x69,
	0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x05,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6b, 0x69, 0x70, 0x2d, 0x6d, 0x65, 0x76, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_relayerapi_service_proto_rawDescOnce sync.Once
	file_relayerapi_service_proto_rawDescData []byte
)

func file_relayerapi_service_proto_rawDescGZIP() []byte {
	file_relayerapi_service_proto_rawDescOnce.Do(func() {
		file_relayerapi_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_relayerapi_service_proto_rawDesc), len(file_relayerapi_service_proto_rawDesc)))
	})
	return file_relayerapi_service_proto_rawDescData
}

var file_relayerapi_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_relayerapi_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_relayerapi_service_proto_goTypes = []any{
	(BridgeType)(0),                          // 0: skip.relayer.BridgeType
	(StatusCode)(0),                          // 1: skip.relayer.StatusCode
	(ChainEnvironment)(0),                    // 2: skip.relayer.ChainEnvironment
	(*FeeAsset)(nil),                         // 3: skip.relayer.FeeAsset
	(*QuoteRequest)(nil),                     // 4: skip.relayer.QuoteRequest
	(*QuoteResponse)(nil),                    // 5: skip.relayer.QuoteResponse
	(*CCTPInfo)(nil),                         // 6: skip.relayer.CCTPInfo
	(*NobleForwardingInfo)(nil),              // 7: skip.relayer.NobleForwardingInfo
	(*SVMSystemAccountTokenAccountPair)(nil), // 8: skip.relayer.SVMSystemAccountTokenAccountPair
	(*VerifyRelayPaymentRequest)(nil),        // 9: skip.relayer.VerifyRelayPaymentRequest
	(*VerifyRelayPaymentResponse)(nil),       // 10: skip.relayer.VerifyRelayPaymentResponse
	(*StatusRequest)(nil),                    // 11: skip.relayer.StatusRequest
	(*StatusResponse)(nil),                   // 12: skip.relayer.StatusResponse
	(*RelayRequest)(nil),                     // 13: skip.relayer.RelayRequest
	(*TransferInfo)(nil),                     // 14: skip.relayer.TransferInfo
	(*TransferInfoCCTP)(nil),                 // 15: skip.relayer.TransferInfoCCTP
	(*TransferInfoEureka)(nil),               // 16: skip.relayer.TransferInfoEureka
	(*RelayResponse)(nil),                    // 17: skip.relayer.RelayResponse
	(*timestamppb.Timestamp)(nil),            // 18: google.protobuf.Timestamp
}
var file_relayerapi_service_proto_depIdxs = []int32{
	0,  // 0: skip.relayer.QuoteRequest.bridge_type:type_name -> skip.relayer.BridgeType
	3,  // 1: skip.relayer.QuoteRequest.fee_asset:type_name -> skip.relayer.FeeAsset
	18, // 2: skip.relayer.QuoteResponse.expiration:type_name -> google.protobuf.Timestamp
	8,  // 3: skip.relayer.CCTPInfo.system_account_token_account_pairs:type_name -> skip.relayer.SVMSystemAccountTokenAccountPair
	6,  // 4: skip.relayer.VerifyRelayPaymentRequest.cctp_metadata:type_name -> skip.relayer.CCTPInfo
	7,  // 5: skip.relayer.VerifyRelayPaymentRequest.noble_forwarding_info:type_name -> skip.relayer.NobleForwardingInfo
	1,  // 6: skip.relayer.StatusResponse.status_code:type_name -> skip.relayer.StatusCode
	14, // 7: skip.relayer.RelayRequest.transfer_info:type_name -> skip.relayer.TransferInfo
	2,  // 8: skip.relayer.RelayRequest.chain_environment:type_name -> skip.relayer.ChainEnvironment
	15, // 9: skip.relayer.TransferInfo.cctp:type_name -> skip.relayer.TransferInfoCCTP
	16, // 10: skip.relayer.TransferInfo.eureka:type_name -> skip.relayer.TransferInfoEureka
	18, // 11: skip.relayer.TransferInfoCCTP.message_sent_tx_time:type_name -> google.protobuf.Timestamp
	7,  // 12: skip.relayer.TransferInfoCCTP.noble_forwarding_info:type_name -> skip.relayer.NobleForwardingInfo
	18, // 13: skip.relayer.TransferInfoEureka.packet_timeout_time:type_name -> google.protobuf.Timestamp
	18, // 14: skip.relayer.TransferInfoEureka.source_tx_time:type_name -> google.protobuf.Timestamp
	9,  // 15: skip.relayer.RelayerApiService.VerifyRelayPayment:input_type -> skip.relayer.VerifyRelayPaymentRequest
	13, // 16: skip.relayer.RelayerApiService.Relay:input_type -> skip.relayer.RelayRequest
	11, // 17: skip.relayer.RelayerApiService.Status:input_type -> skip.relayer.StatusRequest
	4,  // 18: skip.relayer.RelayerApiService.Quote:input_type -> skip.relayer.QuoteRequest
	10, // 19: skip.relayer.RelayerApiService.VerifyRelayPayment:output_type -> skip.relayer.VerifyRelayPaymentResponse
	17, // 20: skip.relayer.RelayerApiService.Relay:output_type -> skip.relayer.RelayResponse
	12, // 21: skip.relayer.RelayerApiService.Status:output_type -> skip.relayer.StatusResponse
	5,  // 22: skip.relayer.RelayerApiService.Quote:output_type -> skip.relayer.QuoteResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_relayerapi_service_proto_init() }
func file_relayerapi_service_proto_init() {
	if File_relayerapi_service_proto != nil {
		return
	}
	file_relayerapi_service_proto_msgTypes[11].OneofWrappers = []any{
		(*TransferInfo_Cctp)(nil),
		(*TransferInfo_Eureka)(nil),
	}
	file_relayerapi_service_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_relayerapi_service_proto_rawDesc), len(file_relayerapi_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relayerapi_service_proto_goTypes,
		DependencyIndexes: file_relayerapi_service_proto_depIdxs,
		EnumInfos:         file_relayerapi_service_proto_enumTypes,
		MessageInfos:      file_relayerapi_service_proto_msgTypes,
	}.Build()
	File_relayerapi_service_proto = out.File
	file_relayerapi_service_proto_goTypes = nil
	file_relayerapi_service_proto_depIdxs = nil
}
