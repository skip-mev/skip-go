// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relayerapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayerApiServiceClient is the client API for RelayerApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayerApiServiceClient interface {
	// VerifyRelayPayment verifies a payment has been recieved on chain for a given transfer, this operation completes
	// asyncronously, and when the payment is verified, the status of the transfer will be updated to PENDING.
	VerifyRelayPayment(ctx context.Context, in *VerifyRelayPaymentRequest, opts ...grpc.CallOption) (*VerifyRelayPaymentResponse, error)
	// Relay will track the status of a transfer, and submit the transactions required to complete the transfer via
	// the bridging protocol. The transfer will be updated to PROCESSING until the transfer is completed, or fails.
	Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error)
	// Status will return the current status of a transfer. PENDING, PROCESSING, COMPLETED, or FAILED. We assume that
	// the status is PENDING for any transaction that has not been verified by the VerifyRelayPayment operation.
	// The status message will be set if the status is FAILED.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Quote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*QuoteResponse, error)
}

type relayerApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayerApiServiceClient(cc grpc.ClientConnInterface) RelayerApiServiceClient {
	return &relayerApiServiceClient{cc}
}

func (c *relayerApiServiceClient) VerifyRelayPayment(ctx context.Context, in *VerifyRelayPaymentRequest, opts ...grpc.CallOption) (*VerifyRelayPaymentResponse, error) {
	out := new(VerifyRelayPaymentResponse)
	err := c.cc.Invoke(ctx, "/skip.relayer.RelayerApiService/VerifyRelayPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerApiServiceClient) Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error) {
	out := new(RelayResponse)
	err := c.cc.Invoke(ctx, "/skip.relayer.RelayerApiService/Relay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerApiServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/skip.relayer.RelayerApiService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerApiServiceClient) Quote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*QuoteResponse, error) {
	out := new(QuoteResponse)
	err := c.cc.Invoke(ctx, "/skip.relayer.RelayerApiService/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerApiServiceServer is the server API for RelayerApiService service.
// All implementations must embed UnimplementedRelayerApiServiceServer
// for forward compatibility
type RelayerApiServiceServer interface {
	// VerifyRelayPayment verifies a payment has been recieved on chain for a given transfer, this operation completes
	// asyncronously, and when the payment is verified, the status of the transfer will be updated to PENDING.
	VerifyRelayPayment(context.Context, *VerifyRelayPaymentRequest) (*VerifyRelayPaymentResponse, error)
	// Relay will track the status of a transfer, and submit the transactions required to complete the transfer via
	// the bridging protocol. The transfer will be updated to PROCESSING until the transfer is completed, or fails.
	Relay(context.Context, *RelayRequest) (*RelayResponse, error)
	// Status will return the current status of a transfer. PENDING, PROCESSING, COMPLETED, or FAILED. We assume that
	// the status is PENDING for any transaction that has not been verified by the VerifyRelayPayment operation.
	// The status message will be set if the status is FAILED.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Quote(context.Context, *QuoteRequest) (*QuoteResponse, error)
	mustEmbedUnimplementedRelayerApiServiceServer()
}

// UnimplementedRelayerApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelayerApiServiceServer struct {
}

func (UnimplementedRelayerApiServiceServer) VerifyRelayPayment(context.Context, *VerifyRelayPaymentRequest) (*VerifyRelayPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRelayPayment not implemented")
}
func (UnimplementedRelayerApiServiceServer) Relay(context.Context, *RelayRequest) (*RelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relay not implemented")
}
func (UnimplementedRelayerApiServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRelayerApiServiceServer) Quote(context.Context, *QuoteRequest) (*QuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quote not implemented")
}
func (UnimplementedRelayerApiServiceServer) mustEmbedUnimplementedRelayerApiServiceServer() {}

// UnsafeRelayerApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayerApiServiceServer will
// result in compilation errors.
type UnsafeRelayerApiServiceServer interface {
	mustEmbedUnimplementedRelayerApiServiceServer()
}

func RegisterRelayerApiServiceServer(s grpc.ServiceRegistrar, srv RelayerApiServiceServer) {
	s.RegisterService(&RelayerApiService_ServiceDesc, srv)
}

func _RelayerApiService_VerifyRelayPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRelayPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerApiServiceServer).VerifyRelayPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skip.relayer.RelayerApiService/VerifyRelayPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerApiServiceServer).VerifyRelayPayment(ctx, req.(*VerifyRelayPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerApiService_Relay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerApiServiceServer).Relay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skip.relayer.RelayerApiService/Relay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerApiServiceServer).Relay(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerApiService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerApiServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skip.relayer.RelayerApiService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerApiServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerApiService_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerApiServiceServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skip.relayer.RelayerApiService/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerApiServiceServer).Quote(ctx, req.(*QuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayerApiService_ServiceDesc is the grpc.ServiceDesc for RelayerApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayerApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skip.relayer.RelayerApiService",
	HandlerType: (*RelayerApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyRelayPayment",
			Handler:    _RelayerApiService_VerifyRelayPayment_Handler,
		},
		{
			MethodName: "Relay",
			Handler:    _RelayerApiService_Relay_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RelayerApiService_Status_Handler,
		},
		{
			MethodName: "Quote",
			Handler:    _RelayerApiService_Quote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayerapi/service.proto",
}
