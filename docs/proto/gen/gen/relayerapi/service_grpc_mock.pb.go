// Code generated by protoc-gen-go-grpc-mock (https://github.com/nefixestrada/protoc-gen-go-grpc-mock). DO NOT EDIT.
// version: v0.2.0

package relayerapi

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
	net "net"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NewRelayerApiServiceServiceMock creates and starts a RelayerApiService service mock.
// it returns the mock and a client for the
func NewRelayerApiServiceServiceMock() (*RelayerApiServiceServiceMock, RelayerApiServiceClient, error) {
	addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
	if err != nil {
		return nil, nil, err
	}

	lis, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return nil, nil, err
	}

	s := grpc.NewServer()
	m := &RelayerApiServiceServiceMock{server: s}

	RegisterRelayerApiServiceServer(s, m)

	go s.Serve(lis)

	cc, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())
	if err != nil {
		return nil, nil, err
	}
	m.cc = cc

	cli := NewRelayerApiServiceClient(cc)

	return m, cli, nil
}

// RelayerApiServiceServiceMock is a mock for the RelayerApiServiceService service.
type RelayerApiServiceServiceMock struct {
	mock.Mock
	server *grpc.Server
	cc     *grpc.ClientConn
	UnimplementedRelayerApiServiceServer
}

func (m *RelayerApiServiceServiceMock) Stop() {
	m.cc.Close()
	m.server.Stop()
}

const VerifyRelayPayment = "VerifyRelayPayment"

func (m *RelayerApiServiceServiceMock) VerifyRelayPayment(ctx context.Context, in *VerifyRelayPaymentRequest) (*VerifyRelayPaymentResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*VerifyRelayPaymentResponse), args.Error(1)
}

const Relay = "Relay"

func (m *RelayerApiServiceServiceMock) Relay(ctx context.Context, in *RelayRequest) (*RelayResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*RelayResponse), args.Error(1)
}

const Status = "Status"

func (m *RelayerApiServiceServiceMock) Status(ctx context.Context, in *StatusRequest) (*StatusResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*StatusResponse), args.Error(1)
}

const Quote = "Quote"

func (m *RelayerApiServiceServiceMock) Quote(ctx context.Context, in *QuoteRequest) (*QuoteResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*QuoteResponse), args.Error(1)
}
